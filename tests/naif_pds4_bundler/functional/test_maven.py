"""Functional Test Family for MAVEN Archive Generation."""

import os
import shutil

from pds.naif_pds4_bundler.__main__ import main
from pds.naif_pds4_bundler.utils.files import string_in_file


def post_setup(self):
    """Setup Test.

    This method will be executed before each test function.
    """
    shutil.copytree("../data/kernels", "kernels")
    shutil.copytree("../data/maven", "maven")


def generate_mks(self, directory="working"):
    """Generate test MKs."""
    shutil.copy2("../data/kernels/lsk/naif0012.tls", "working/")
    with open(f"{directory}/maven_2015_v09.tm", "w") as p:
        p.write(
            "KPL/MK\n"
            "\\begindata\n"
            f"PATH_VALUES = ( '{os.getcwd()}' )\n"
            "PATH_SYMBOLS = ( 'KERNELS' )\n"
            "KERNELS_TO_LOAD = ('$KERNELS/../data/kernels/lsk/naif0012.tls')\n"
            "\\begintext"
        )
    with open(f"{directory}/maven_2020_v06.tm", "w") as p:
        p.write(
            "KPL/MK\n"
            "\\begindata\n"
            f"PATH_VALUES = ( '{os.getcwd()}' )\n"
            "PATH_SYMBOLS = ( 'KERNELS' )\n"
            "KERNELS_TO_LOAD = ('$KERNELS/../data/kernels/lsk/naif0012.tls')\n"
            "\\begintext"
        )


def test_maven_mks_input(self):
    """Test MKs provided as input.

    Test the generation of MK labels with MKs provided as inputs.

    The first run will provide the following error message::

        RuntimeError: No kernels present in (...)maven_2015_v09.tm. Please review MK generation.

    The second run will be successful.

    The test is successful if the conditions described above are met.
    """
    post_setup(self)
    config = "../config/maven.xml"
    updated_config = "working/maven.xml"
    plan = "working/maven.plan"

    shutil.copy2("../data/maven_release_24.kernel_list", "working/")

    with open(config, "r") as c:
        with open(updated_config, "w") as n:
            for line in c:
                if '<mk name="maven_$YEAR_v$VERSION.tm">' in line:
                    n.write("<mk_inputs>")
                    n.write("   <file>working/maven_2015_v09.tm</file>\n")
                    n.write("   <file>working/maven_2020_v06.tm</file>\n")
                    n.write("</mk_inputs>")
                    n.write('<mk name="maven_$YEAR_v$VERSION.tm">\n')
                else:
                    n.write(line)

    with open("working/maven_2015_v09.tm", "w") as p:
        p.write("KPL/MK\n")
    with open("working/maven_2020_v06.tm", "w") as p:
        p.write("KPL/MK\n")

    with open("working/maven.plan", "w") as p:
        p.write("mvn_sclkscet_00088.tsc")

    with self.assertRaises(RuntimeError):
        main(
            updated_config,
            plan=plan,
            silent=self.silent,
            verbose=self.verbose,
            log=self.log,
        )

    main(
        updated_config,
        clear="working/maven_release_25.file_list",
        silent=self.silent,
        verbose=self.verbose,
        log=self.log,
    )

    generate_mks(self)

    main(
        updated_config,
        plan=plan,
        silent=self.silent,
        verbose=self.verbose,
        log=self.log,
    )


def test_maven_mks_list(self):
    """Test MKs provided in release plan to be generated by NPB.

    Test is successful if NPB is executed without errors.
    """
    post_setup(self)
    config = "../config/maven.xml"
    plan = "working/maven.plan"
    faucet = "bundle"

    with open("working/maven.plan", "w") as p:
        p.write("mvn_sclkscet_00088.tsc\n")
        p.write("maven_2015_v09.tm\n")
        p.write("maven_2020_v06.tm")

    main(
        config,
        plan=plan,
        faucet=faucet,
        silent=self.silent,
        verbose=self.verbose,
        log=self.log,
    )


def test_maven_mks_list_in_kernels(self):
    """Test MKs provided in release plan and provided as inputs.

    The MKs are not present in the configuration file but are present in
    the input kernels directory.

    Test is successful if NPB is executed without errors.
    """
    post_setup(self)
    config = "../config/maven.xml"
    plan = "working/maven.plan"
    faucet = "bundle"

    with open("working/maven.plan", "w") as p:
        p.write("mvn_sclkscet_00088.tsc\n")
        p.write("maven_2015_v09.tm\n")
        p.write("maven_2020_v06.tm")

    generate_mks(self, directory="kernels/mk")

    main(
        config,
        plan=plan,
        faucet=faucet,
        silent=self.silent,
        verbose=self.verbose,
        log=self.log,
    )


def test_maven_mks_list_config_in_kernels(self):
    """Test MKs provided in release plan and provided as double inputs.

    The MKs are both present in the configuration file and are present in
    the input ``kernels_directory``. The files specified by the
    configuration file are not present and NPB raises an error.
    """
    post_setup(self)
    config = "../config/maven.xml"
    updated_config = "working/maven.xml"
    plan = "working/maven.plan"
    faucet = "bundle"

    with open("working/maven.plan", "w") as p:
        p.write("mvn_sclkscet_00088.tsc\n")
        p.write("maven_2015_v09.tm\n")
        p.write("maven_2020_v06.tm")

    with open(config, "r") as c:
        with open(updated_config, "w") as n:
            for line in c:
                if '<mk name="maven_$YEAR_v$VERSION.tm">' in line:
                    n.write("<mk_inputs>")
                    n.write("   <file>working/maven_2015_v09.tm</file>\n")
                    n.write("   <file>working/maven_2020_v06.tm</file>\n")
                    n.write("</mk_inputs>")
                    n.write('<mk name="maven_$YEAR_v$VERSION.tm">\n')
                else:
                    n.write(line)

    generate_mks(self, directory="kernels/mk")

    with self.assertRaises(RuntimeError):
        main(
            updated_config,
            plan=plan,
            faucet=faucet,
            silent=self.silent,
            verbose=self.verbose,
            log=self.log,
        )


def test_maven_mks_list_config_in_kernels_and_config(self):
    """Test MKs provided in release plan and provided as dobule inputs.

    The MKs are both present in the configuration file and are present in
    the input ``kernels_directory``. The files in the release plan that
    point to the ``kernels_directory`` will be ignored.

    Test is successful if NPB is executed without errors.
    """
    post_setup(self)
    config = "../config/maven.xml"
    updated_config = "working/maven.xml"
    plan = "working/maven.plan"
    faucet = "bundle"

    with open("working/maven.plan", "w") as p:
        p.write("mvn_sclkscet_00088.tsc\n")
        p.write("maven_2015_v09.tm\n")
        p.write("maven_2020_v06.tm")

    with open(config, "r") as c:
        with open(updated_config, "w") as n:
            for line in c:
                if '<mk name="maven_$YEAR_v$VERSION.tm">' in line:
                    n.write("<mk_inputs>")
                    n.write("   <file>working/maven_2015_v09.tm</file>\n")
                    n.write("   <file>working/maven_2020_v06.tm</file>\n")
                    n.write("</mk_inputs>")
                    n.write('<mk name="maven_$YEAR_v$VERSION.tm">')
                else:
                    n.write(line)

    generate_mks(self)
    generate_mks(self, directory="kernels/mk")

    main(
        updated_config,
        plan=plan,
        faucet=faucet,
        silent=self.silent,
        verbose=self.verbose,
        log=self.log,
    )


def test_maven_no_mk(self):
    """Test to generate the first release with no MK inputs.

    No meta-kernels are generated because the meta-kernel includes
    the year pattern ``YEAR``.

    Test is successful if NPB is executed without errors.
    """
    post_setup(self)
    config = "../config/maven.xml"
    plan = "working/maven.plan"
    faucet = "staging"

    with open("working/maven.plan", "w") as p:
        p.write("mvn_sclkscet_00088.tsc")

    main(
        config,
        plan=plan,
        faucet=faucet,
        silent=self.silent,
        verbose=self.verbose,
        log=self.log,
    )


def test_maven_generate_mk(self):
    """Test automatic generation of when specifying MK name in plan.

    Test is successful if NPB is executed without errors.
    """
    post_setup(self)
    config = "../config/maven.xml"
    plan = "working/maven.plan"
    faucet = "staging"

    with open("working/maven.plan", "w") as p:
        p.write("mvn_sclkscet_00088.tsc")
        p.write("maven_2021_v99.tm")

    main(
        config,
        plan=plan,
        faucet=faucet,
        silent=self.silent,
        verbose=self.verbose,
        log=self.log,
    )


def test_maven_increment_times_from_yearly_mks(self):
    """Test increment start time set via configuration with yearly MKs.

    This test is implemented to check that the functionality is as
    expected for yearly MKs.
    """
    post_setup(self)
    config = "../config/maven.xml"
    # updated_config = "working/maven.xml"
    plan = "working/maven.plan"
    faucet = "staging"

    with open("working/maven.plan", "w") as p:
        p.write("mvn_sclkscet_00088.tsc\n")
        p.write("maven_2015_v09.tm\n")
        p.write("maven_2020_v06.tm\n")
        p.write("maven_2021_v02.tm")

    # with open(config, "r") as r:
    #    with open(updated_config, "w") as w:
    #        pass

    #
    # This first combination provides times from start to end of the
    # MK and the times provided via configuration are ignored:
    #
    #  <increment_start>2021-05-25T08:00:00Z</increment_start>
    #  <increment_finish>2021-06-25T08:00:00Z</increment_finish>
    #
    # precisely because of the yearly MKs.
    #
    main(
        config,
        plan=plan,
        faucet=faucet,
        silent=self.silent,
        verbose=self.verbose,
        log=self.log,
    )

    line_check = (
        "No kernel(s) found to determine MK coverage. Times from "
        "configuration in accordance to yearly MK will be used: "
        "2020-01-01T00:00:00Z - 2021-01-01T00:00:00Z"
    )

    if not string_in_file("working/maven_release_25.log", line_check):
        raise BaseException

    line_check = (
        "No kernel(s) found to determine MK coverage. Times from "
        "configuration in accordance to yearly MK will be used: "
        "2015-01-01T00:00:00Z - 2016-01-01T00:00:00Z"
    )

    if not string_in_file("working/maven_release_25.log", line_check):
        raise BaseException

    line_check = (
        "No kernel(s) found to determine MK coverage. Times from "
        "configuration in accordance to yearly MK will be used: "
        "2021-01-01T00:00:00Z - 2021-06-25T08:00:00Z"
    )

    if not string_in_file("working/maven_release_25.log", line_check):
        raise BaseException

    line_check = "Increment start corrected from previous bundle"

    if not string_in_file("working/maven_release_25.log", line_check):
        raise BaseException

    line_check = "2013-11-18T19:20:42Z - 2021-06-25T08:00:00Z"

    if not string_in_file("working/maven_release_25.log", line_check):
        raise BaseException


def test_maven_load_kernels(self):
    """Basic kernel load test.

    This test was implemented after an incorrect SCLK was loaded for
    MAVEN and to support the corresponding bug fix. The test checks
    that the warning message provided by NPB when loading an incorrect
    SCLK is as expected.
    """
    config = "../config/maven.xml"
    plan = "working/maven_orbnum.plan"
    found = False
    faucet = "staging"

    with open(plan, "w") as p:
        p.write("maven_orb_rec_210101_210401_v1.orb")
        p.write("\nmaven_orb_rec_210101_210401_v1.nrb")

    os.mkdir("maven")

    shutil.copytree("../data/kernels", "kernels")

    shutil.copytree("../data/misc/orbnum", "misc/orbnum")

    shutil.copy2(
        "kernels/sclk/MVN_SCLKSCET.00088.tsc",
        "kernels/sclk/MVN_SCLKSCET.00100.tsc.bad",
    )

    shutil.copy2(
        "kernels/sclk/MVN_SCLKSCET.00088.tsc", "kernels/sclk/MVN_SCLKSCET.00000.tsc"
    )

    os.mkdir("kernels/sclk/zzarchive")
    shutil.copy2(
        "kernels/sclk/MVN_SCLKSCET.00088.tsc",
        "kernels/sclk/zzarchive/MVN_SCLKSCET.00000.tsc",
    )

    main(config, plan, faucet=faucet, silent=self.silent, log=True)

    log_line = "naif_pds4_bundler/functional/kernels/sclk/MVN_SCLKSCET.00088.tsc'"

    with open("working/maven_release_01.log", "r") as f:
        for line in f.readlines():
            if log_line in line:
                found = True

    self.assertTrue(found)
