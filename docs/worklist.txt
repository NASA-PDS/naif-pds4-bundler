snaif-pds4-bundle worklist by MCS/NAIF, updated 5 May, 2021
============================================================

v0.1.0 - Generation of kernel lists.

v0.2.0 - Generation of a PDS4 Bundle with examples.

v0.3.0 - Generation of InSight Bundle from existing archive.

v0.4.0 - BVS/NAIF feedback incorporation, first round.

  -- The faucet item of the configuration file to be a parameter instead
  --  Format of the Plan file can be reviewed and made more convenient for
     users.
  -- Kernel List, meta-kernel grammar, meta-kernel template to be part
     of the configuration file.
  -- spiceds template to be versioned, after all it will change continuously.
  -- Step 3 - Bundle/dataset structure generation to include staging area
     reference to make it clear to users.

  -- PCK file needs to be loaded as well. Maybe after all it is just better
     to generate and load a meta-kernel.
  -- Label and product comparison log visualization to be an option. Default
     to be set to false.
  -- Incorporate a comparison of selected files as well (as with the previous
     point, for those subject to user errors from configuration etc.)
  --  URN or LID to be fully configurable (for example KPLO will need that).
  -- Automated documentation to be generated from function and class
     headers with Spynx. This will be useful for developers and for the
     community.
  -- Documentation of the process not to use faketex or any NAIF style instead
     use MD for example.
  -- dsindex files not required for PDS4 archives (update in generation
     index Perl script not really required).

v0.5.0 - Generation of MAVEN Bundle with user input meta-kernels.

  -- Add test case for using similar labels from previous increment
     (that is case 2; not the appropriate one).
  -- Files that need a change in the filename to be a configuration item
     (kernel list will then be generated easier).
  -- Label templates for specific information models. Include:
        * 1.5.0.0
        * 1.11.0.0
        * latest model available at the time of implementation
  -- Label templates to be provided by users. Check if exiting use these
     if present.
  -- Convert configuration file to a format similar to NDT or an XML file
     that can be validated against a schematron. JSON can still be used as an
     intermediate format if need be.

v0.6.0 - Generation of LADEE Bundle.

  -- Beware of meta-kernels with "_v" in name besides from version.
  -- Split meta-kernel by year.

v1.0.0 - First 'public' release.

Work List:

  CHECK: Include DOI in Citation Information Description as a workaround
         for information model 1.5.0.0?


  -- Incorporate a validation at the end of the process that reports on
     sensible field such as descriptions, start and stop times, and other
     fields to be considered, this report could be presented as table.  
  -- For PDS3 first implement generation with MKLABL with the ultimate goal
     to replace it completely with Python code.
  -- Same approach for Perl scripts, end up replacing them with Python code.        
  -- Evaluate or assess file permissions, changing could be optional.

  -- Include DOIs in configurations:
      * OREX:    10.17189/1520435
      * MAVEN:   10.17189/1520434
      * INSIGHT: 10.17189/1520436
      * LADEE:   10.17189/1522402
        Galileo: 10.17189/1522403


        Cassini SPICE Kernels V1.0: 10.17189/1520114
        Clementine SPICE Kernels V1.0: 10.17189/1520111
        Dawn SPICE Kernels V1.0: 10.17189/1520119
        Deep Impact SPICE Kernels V1.0: 10.17189/1520120
        Deep Impact - EPOXI SPICE Kernels V1.0: 10.17189/1520118
        Deep Space 1 SPICE Kernels V1.0: 10.17189/1520102
        GRAIL SPICE Kernels V1.0: 10.17189/1520110
        Hayabusa SPICE Kernels V1.0: 10.17189/1520104
        Juno SPICE Kernels V1.0: 10.17189/1520117
        Lunar Reconnaissance Orbiter SPICE Kernels V1.0: 10.17189/1520116
        Mars Exploration Rover 1 SPICE Kernels V1.0: 10.17189/1520107
        Mars Exploration Rover 2 SPICE Kernels V1.0: 10.17189/1520105
        MESSENGER SPICE Kernels V1.0: 10.17189/1520108
        Mars Global Surveyor SPICE Kernels V1.0: 10.17189/1520101
        Mars Reconnaissance Orbiter SPICE Kernels V1.0: 10.17189/1520100
      * Mars Science Laboratory SPICE Kernels V1.0: 10.17189/1520113
        NEAR SPICE Kernels V1.0: 10.17189/1520103
        New Horizons SPICE Kernels V1.0: 10.17189/1520109
      * 2001 Mars Odyssey SPICE Kernels V1.0: 10.17189/1520115
        Stardust SPICE Kernels V1.0: 10.17189/1520106
        Viking Orbiter 1 and 2 SPICE Kernels V1.0: 10.17189/1520112

    -- Generation of labels only.
    -- Implement a smart comparison of spiceds files in such way
       that a warning is provided if something looks fishy (type of file
       not present for example)
    -- Implement coverage tests in master test file:

        #
        # Debugging does not work while using coverage.
        # See: https://github.com/microsoft/vscode-python/issues/693
        #
        #cov = coverage.Coverage()
        #cov.start()

        (... some code ...)

        #cov.stop()
        #cov.save()
        #
        #cov.html_report()

    -- TBD: Implement schema validation for config file as in here:
       https://stackoverflow.com/questions/299588/validating-with-an-xml-schema-in-python

    -- Implement archvie time boundaries tests (there is one sketched in
       configuration).

    -- Summary to be included, as per BVS suggestion

      foreach FF ( logical_identifier version_id title description start_date_time stop_date_time file_name file_size md5_checksum object_length kernel_type encoding_type )
         echo -------------------------------------------------------------------------- $FF
         grep $FF `find spice_kernels -name '*.xml' -mtime -1 -print | sort`
      end

      -- check that there is a XML label for each file under spice_kernels

      foreach FF ( `ls -1 spice_kernels/*/*.* | grep -vi '\.xml$'` )
         if ( ! -e $FF:r.xml && ! -e $FF:r.XML ) then
            echo NO XML label for $FF
         endif
      end

    -- From MAKLABEL

C     3) All files that are to have labels generated must have a NAIF
C        file ID word as the first "word" on the first line of the
C        file.The SPICE binary kernel files are guaranteed to have
C        this ID word, but the ASCII text kernels, IK, LSK, PCK, SCLK,
C        are not. for completeness, the appropriate ID words are listed
C        here, so that they may be inserted into the ASCII text kernel
C        files if necessary.
C
C           ASCII Text File Type      ID Word
C           --------------------      --------
C           IK                        KPL/IK
C           LSK                       KPL/LSK
C           PCK                       KPL/PCK
C           SCLK                      KPL/SCLK
C           FRAMES                    KPL/FK
C
C        The ID words must be the first item in the file, and it
C        should appear on a line by itself, e.g., suppose we have
C        a leapseconds text kernel file that is missing the ID word,

